[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://tg0eqr2qd47r"]

[sub_resource type="Shader" id="Shader_is1ey"]
code = "shader_type canvas_item;
render_mode blend_mix;

#include \"res://shaders/noise_funcs.gdshaderinc\"

uniform float scale = 20.0;
uniform float control_noise_scale : hint_range(0.0, 0.3) = 0.17;
uniform float jitter : hint_range(0.0, 1.0) = 0.5;

vec2 sdVector(in vec2 p, in vec2 v) {
	float vp = dot(v, -p);
	float vv = dot(v, v);
	float t = clamp(-vp / vv, 0., 1.);
	return t * v - p;
}

vec3 noised2(vec2 p) {
	float amp = 1.0;
	float freq = 1.0;
	vec3 result = noised(p);
	/*
	for (int i = 1; i<5; i++) {
		freq*= 1.43;
		amp *= 0.9;
		result += noised(p * freq) * amp;
	}
	*/
	return result;
}

void fragment() {
	vec3 col = vec3(0.0);

	float mult = 1.0;
	vec2 p = UV * scale * mult;// + TIME;
	vec4 cell = vec4(floor(p), fract(p));
	
	//Local neighborhood 7x7
	vec2 minddistvec = vec2(9999.9, 9999.9);
	for (float ix = cell.x-2.; ix < cell.x+3.; ix += 1.) {
		for (float iy = cell.y-2.; iy < cell.y+3.; iy += 1.) {
			vec2 start_cell = vec2(ix, iy);
			
			vec3 grad = noised(start_cell * control_noise_scale / scale * 100. / mult);
			vec2 dir = -clamp(grad.yz * max(abs(grad.yz)-0.5*abs(grad.zy), 0.0) * 999999.0, vec2(-1.), vec2(1.));
			
			vec2 start_point = hash22(start_cell) * jitter;
			vec2 end_point = hash22(start_cell + dir) * jitter + dir;
			
			vec2 dist_vec = sdVector(p - start_cell - start_point, end_point - start_point);
			//float width = mod(start_cell.x, 2.0) * 0.5 + 0.5;	
			//dist = pow(dist, width);		
			if (dot(dist_vec, dist_vec) < dot(minddistvec, minddistvec)) {
				minddistvec = dist_vec;
			}
		}
	}
	
	//mindist = length(minddistvec);
	//mindist = sqrt(dot(minddistvec, minddistvec));
	float mindist = length(minddistvec);
	
	//float vector = sdVector(cell.zw, vec2(2.0, 2.0));
	//col = vec3(noised(p).r + 0.5);
	float noise = noised(cell.xy * control_noise_scale).x;
	vec2 grad = noised(cell.xy * control_noise_scale).yz;
	
	vec2 dir = clamp(grad * max(abs(grad)-0.5*abs(grad.yx), 0.0) * 999999.0, vec2(-1.), vec2(1.));
	col = vec3(dir * 0.5 + 0.5, 0.0);
	
	float point = length(cell.zw - hash22(cell.xy));
	//col = vec3(hash22(cell.xy), 0.0);
	
	noise = (noise+0.5) * 0.6;
	//mindist = smoothstep(0.1, 0.5, mindist);
	
	col = vec3(mindist);
	//col = vec3(minddistvec.x*0.5+0.5, minddistvec.y*0.5 + 0.5, 0.0);

	COLOR = vec4(col, 1.0);
}














"

[resource]
shader = SubResource("Shader_is1ey")
shader_parameter/scale = 100.0
shader_parameter/control_noise_scale = 0.034
shader_parameter/jitter = 0.591
